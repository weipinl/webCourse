//scope
1. By default, javascript function is under root scope / "window" object

2. if statement does NOT create new scope

3. ternary operator 
    A. condition ? exp1 : expr2;
        a. 
        function isUserValid(bool) {
            return bool;
        }

        var answer = isUserValid(true) ? "You may enter" : "Access Denied";

4. Can use https://babeljs.io/ (Babel) to generate browser-compatible JavaScript out

5. cons = you cannot reasign to a new variable

6. cons obj = {
    player: 'booby',
    experience: 100,
    wizardLevel: false
}

    A. you cannot reasign the obj (ex. obj = 5;), BUT, you can change the property of the obj (obj.wizardLevel = false);

7. template string
    A. you can use `` + ${someVariable} to output a string dynamically
    B. const greetingBest = `Hello ${name} you seem to be ${age - 10}. What a lovely ${pet} you have`;

8. default argument 

    function greet(name='', age=30, pet='cat'){
    return `Hello ${name} you seem to be ${age - 10}. What a lovely ${pet} you have`; 
} //would return "Hello  you seem to be 20. What a lovely cat you have" if no parameter is given

9. symbol 

// symbol are use to create unique type, so you are sure there won't be any conflict

10. reference type 

11. context vs scope

12. instantiation 

13 Pass by reference vs pass by value
    A. object = pass by reference 
    B. primitive type = pass by value

14. type coercion 
    A. happens when you use ==  //compare the two values, and coerce one type to the other
    B. should use ===, it is tricky to use type coercion in javascript

15. //flat() 

16. flatMap()

17. fromEntries

18. try/catch block

19. for of loop
    A. works with something thats iterable. (ex string, array)
    B. does NOT work on object
    C. iterating

20. for in loop
    A. works on object
    B. enumerating

21. BigInt
22. Nullish Coalescing Operator ??
    A. ?? is a locagial operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand
    B. whereas, logical OR (||), returns the right-hand side operand if the left operand is any "FALSY" value, not ONLY null or undefined.

23. Optional Chaining Operator ?.
24. Promise:allSettled
25. globalThis

How does javascript work?

Questions could be like (need to visit the )
A. What's the difference between asynchronous vs synchronous in javascript?
B. Javascript is a single threaded langauge that can be non-blocking

What is a program?
    A. it needs to allocate memory
    B. it needs to parse and execute command

Engines (V8 for google chrome)  consist of two parts
    A. memory heap
        a. where memory allocation happen (ex. const a = 1 //this would allocate the memory)
        b. what problem could happen
            - memory leak (there is a limited amount of memory we could have)
                - by having unused memory (global variables are bad if we have a lot of variable not being used)
    B. Call stack
        a. where the code is read and executed (ex. console.log('1'), console.log('2'))
        b. it read -> gets put in call stack and creates 1 (remove it and then add the second one to the call stack)
        ex. const one = () => {
            const two = () => {
                console.log('4');
            }
            two();
        }
        call stack would do one () => two() => console.log('4') => pop console.log('4') => pop two() => pop one(), then call stack would be empty

Javascript is a single threaded langauge that can be non-blocking?
    A. single threaded means there is only one call stack
    B. can only do one at the time (FILO) first in last out
    C. some other progarmming language uses multithread, but there could be some issue (ex. deadlock)
    D. synchronous = line is executed one by one (latter can't start until the lines above are done executing).
    E. we can use asynchronous if there is a function/task that takes up a lot of time 
        console.log('1');
        setTimeout(() => {
            console.log('2');
        }, 2000)
        console.log('3');
        //this would output 1 3 2

Javascript Run-Time Environment (is part of the browser)
Consist of 
    A. Web APIs (DOM(document), AJAX(XMLHttpRequest), Timeout(setTimeout))
    B. Callback Queue
    C. Event Loop

inline script is bad because the problem of "code reusability" && "polution of global namespace"
problem with script tag (lack of dependency resolution)
    A. if we need to use the script tags, we still need to copy it to another page
    B. lack of dependency resolution 
        a. we have to make sure the script is call in proper order 
        b. does not solve the "global namespace" problem.

IIFE   
    (function() {
        myApp.add = function(a, b) {
            return a + b;
        }
    })();

    //this would execute the function and run it in your javascript file
    //doesn't pollute the global namespace variable
    //issue with IIFE, lack of dependency and resolution is still there


--------------------Browserify---------------------------------- 
//uses common JS + Browerify

//Actually a "Module Bundler"
Module Bundler = runs before you put the server online, read through everything and put one file online
all the script would be in ONE first before putting it online
//js1
module.exportss = function add(a,b){
    return a+b;
}
//js2
var add = require("./add"); //we are assuming the js1 file is called add.js

Javascript doesn't have a module system build into the langauge, that's why there is so many way of importing the files.

//with the introduction of ES6 
we can do export/importing


------------------------ES6 + Webpack2 --------------------------
Example
//js1
export const add = (a, b) => a + b;
//or
export default function add() {
    return a + b;
}

//js2
import { add } from './add'
//or
import add from './add'